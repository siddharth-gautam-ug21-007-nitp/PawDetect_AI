# -*- coding: utf-8 -*-
"""PawDetect_AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wWzTulmCjFgHgZ3P3yGfXSXL4rmGd9r8
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d salader/dogs-vs-cats

import zipfile
zip_ref = zipfile.ZipFile('/content/dogs-vs-cats.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

import tensorflow as tf
import keras
from keras import Sequential
from keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,BatchNormalization,Dropout

#generators
train_dataset = keras.utils.image_dataset_from_directory(
    directory = '/content/train',
    labels = 'inferred',
    label_mode = 'int',
    batch_size = 32,
    image_size = (256,256)
)

val_dataset = keras.utils.image_dataset_from_directory(
    directory = '/content/test',
    labels = 'inferred',
    label_mode = 'int',
    batch_size = 32,
    image_size = (256,256)
)

#normalize
def conversion(image,label):
  image = tf.cast(image/255. ,tf.float32)
  return image,label

train_dataset = train_dataset.map(conversion)
val_dataset = val_dataset.map(conversion)

#Create CNN model
model = Sequential()

model.add(Conv2D(32,kernel_size=(3,3),padding='valid',activation='relu',input_shape=(256,256,3)))
model.add(BatchNormalization())  ##to remove overfitting
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Conv2D(64,kernel_size=(3,3),padding='valid',activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Conv2D(128,kernel_size=(3,3),padding='valid',activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Flatten())

model.add(Dense(128,activation='relu'))
model.add(Dropout(0.1))          ## to remove overfitting
model.add(Dense(64,activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(1,activation='sigmoid'))

model.summary()

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

processing = model.fit(train_dataset,epochs=10,validation_data=val_dataset)

import matplotlib.pyplot as plt

plt.plot(processing.history['accuracy'],color='red',label='train')
plt.plot(processing.history['val_accuracy'],color='blue',label='validation')
plt.legend()
plt.show()

plt.plot(processing.history['loss'],color='red',label='train')
plt.plot(processing.history['val_loss'],color='blue',label='validation')
plt.legend()
plt.show()

## New Unseen data prediction
import cv2
test_image = cv2.imread('/content/dog.jpg')
plt.imshow(test_image)
## 1->it shows that its dog , 0->it shows cat     (based on heirarchy of folder)

test_image.shape

test_image = cv2.resize(test_image,(256,256))

test_input = test_image.reshape((1,256,256,3))

model.predict(test_input)

test_image_2 = cv2.imread('/content/cat.jpg')
plt.imshow(test_image_2)

test_image_2.shape

test_img_2 = cv2.resize(test_image_2,(256,256))

test_input_2 = test_img_2.reshape((1,256,256,3))

model.predict(test_input_2)